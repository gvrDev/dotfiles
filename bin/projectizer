#!/bin/bash
CACHE_FILE="$HOME/.projectizer.cache.txt"
CACHE_FILE_RECURSIVE="$HOME/.projectizer.recursive.cache.txt"
if [ ! -f $CACHE_FILE ]; then
	touch $CACHE_FILE
fi
if [ ! -f $CACHE_FILE_RECURSIVE ]; then
	touch $CACHE_FILE_RECURSIVE
fi

add_path() {
	if [[ (-z "$(<$2 | fzf -e --select-1 --exit-0 --filter=$2)") && (-n $2) ]]; then
		echo $1 >>$2
	fi
}

add_op_usage() {
	echo "Usage: add [flags] <path>"
	echo "flags:"
	echo "-rd|--recursive-dynamic                                    place path in the recursive cache for dynamic fzf"
	echo "-rs|--recursive-static <types_to_include>                  place subpaths respecting the types in the normal cache for fzf"
	echo ""
}
handle_add_op() {
	path_to_add=$1
	final_cache=$CACHE_FILE

	while (("$#")); do
		case $1 in
		-rd | --recursive-dynamic)
			if [ -z $2 ]; then
				add_op_usage
				exit 1
			else
				shift 2
				final_cache=$CACHE_FILE_RECURSIVE
			fi
			;;
		--help)
			add_op_usage
			exit 0
			;;
		-* | --*)
			add_op_usage
			exit 1
			;;
		*)
			path_to_add=$1
			shift
			;;

		esac
	done

	add_path $(realpath $path_to_add) $final_cache
}

handle_clean_op() {
	rm -rf $CACHE_FILE
	rm -rf $CACHE_FILE_RECURSIVE
	touch $CACHE_FILE
	touch $CACHE_FILE_RECURSIVE
	echo "$HOME/dev/work" >>$CACHE_FILE_RECURSIVE
	echo "$HOME/dev/personal" >>$CACHE_FILE_RECURSIVE
	echo "$HOME/dotfiles" >>$CACHE_FILE_RECURSIVE
}

############################################################
############################################################
# Main program                                             #
############################################################
############################################################

main_usage() {
	echo "Usage: projectizer <operation> [...]"
	echo "operations:"
	echo "add [flags] <path>                          places the path into a cache file"
	echo "clean [flags]                               resets the cache files"
	echo ""
}

if [ ! $# -eq 0 ]; then
	case $1 in
	add)
		shift
		handle_add_op $@
		;;
	clean)
		shift
		handle_clean_op $@
		;;
	help)
		main_usage
		exit 0
		;;
	*) ;;
	esac
else
	recursive_cache_content=$(find $(<$CACHE_FILE_RECURSIVE) -mindepth 1 -maxdepth 1 -type d,f)
	normal_cache_content=$(<$CACHE_FILE)

	if [[ (-n $normal_cache_content) && (-n $recursive_cache_content) ]]; then
		result=$(printf '%s\n%s\n' "$recursive_cache_content" "$normal_cache_content" | fzf)
	elif [[ (-n $normal_cache_content) && (-z $recursive_cache_content) ]]; then
		result=$(printf '%s\n' "$normal_cache_content" | fzf)
	elif [[ (-z $normal_cache_content) && (-n $recursive_cache_content) ]]; then
		result=$(printf '%s\n' "$recursive_cache_content" | fzf)
	fi

	if [ -n $result ]; then
		if [ -z $EDITOR_PIPE ]; then
			$EDITOR $EXTRA_ARGS $result
		else
			$EDITOR_PIPE $EXTRA_ARGS $result
		fi
	fi
fi
