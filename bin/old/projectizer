#!/usr/bin/env fish

############################################################
# Global vars                                              #
############################################################
set CONFIG_PATH "$HOME/.config/projectizer"
set CACHE_FILE "$HOME/.config/projectizer/projectizer.cache.txt"
set CACHE_FILE_RECURSIVE "$HOME/.config/projectizer/projectizer.recursive.cache.txt"

############################################################
# functions                                                #
############################################################
function fill_empty_recursive_cache
	echo "$HOME/dev/work" >>$CACHE_FILE_RECURSIVE
	echo "$HOME/dev/personal" >>$CACHE_FILE_RECURSIVE
	echo "$HOME/dotfiles" >>$CACHE_FILE_RECURSIVE
end

function add_path
	if test -z (fzf -e --select-1 --exit-0 --filter=\$2 <\$2) and test -n \$2
		echo \$1 >>\$2
	end
end

############################################################
# operations                                               #
############################################################
function handle_add_op
	set path_to_add $argv[1]
	set final_cache $CACHE_FILE

	while set -q argv[1]
		switch $argv[1]
		case -rd --recursive-dynamic
			if test -z $argv[2]
				add_op_usage
				exit 1
			else
				set argv (next $argv) (next $argv)
				set final_cache $CACHE_FILE_RECURSIVE
			end
		case --help
			add_op_usage
			exit 0
		case -* --*
			add_op_usage
			exit 1
		case '*'
			set path_to_add $argv[1]
			set argv (next $argv)
		end
	end

	add_path (realpath $path_to_add) $final_cache
end

function handle_clean_op
	rm -rf $CACHE_FILE
	rm -rf $CACHE_FILE_RECURSIVE
	touch $CACHE_FILE
	touch $CACHE_FILE_RECURSIVE
	fill_empty_recursive_cache
end

############################################################
# Help                                                     #
############################################################
function main_usage
	echo "Usage: projectizer <operation> [...]"
	echo "operations:"
	echo "add [flags] <path>                          places the path into a cache file"
	echo "clean                                       resets the cache files"
	echo ""
end

function add_op_usage
	echo "Usage: add [flags] <path>"
	echo "flags:"
	echo "-rd|--recursive-dynamic                                    place path in the recursive cache for dynamic fzf"
	echo "-rs|--recursive-static <types_to_include>                  place subpaths respecting the types in the normal cache for fzf"
	echo ""
end

############################################################
# Main program                                             #
############################################################
if not test -d $CONFIG_PATH
	mkdir $CONFIG_PATH
end
if not test -f $CACHE_FILE
	touch $CACHE_FILE
end
if not test -f $CACHE_FILE_RECURSIVE
	touch $CACHE_FILE_RECURSIVE
	fill_empty_recursive_cache
end

if test (count $argv) -ne 0
	switch $argv[1]
	case add
		set argv (next $argv)
		handle_add_op $argv
	case clean
		set argv (next $argv)
		handle_clean_op $argv
	case help
		main_usage
		exit 0
	case '*'
	end
else
	set recursive_cache_content (find (cat $CACHE_FILE_RECURSIVE) -mindepth 1 -maxdepth 1 -type d,f)
	set normal_cache_content (cat $CACHE_FILE)

  if test -n "$normal_cache_content"; and test -n "$recursive_cache_content"
    set result(for val in $recursive_cache_content $normal_cache_content
      echo $val
    end | fzf)
  else if test -n "$normal_cache_content"
    set result(for val in $normal_cache_content
      echo $val
    end | fzf)
  else if test -n "$recursive_cache_content"
    set result(for val in $recursive_cache_content
      echo $val
    end | fzf)
	end

	if test -n $result
		if test -z $EDITOR_PIPE
			$EDITOR $EXTRA_ARGS $result
		else
			$EDITOR_PIPE $EXTRA_ARGS $result
		end
	end
end
